# music_system

```elixir
Mix.install([
  {:jason, "~> 1.4"}
])
```

## Get data

```elixir
defmodule Lastfm do
  @base_url "http://ws.audioscrobbler.com/2.0/"
  # @base_url "http://httpbin.org/get"

  defmodule Client do
    defstruct [:api_key, :api_secret]
  end

  def new(api_key, api_secret \\ nil), do: %Client{api_key: api_key, api_secret: api_secret}

  def _do_get(%Client{api_key: api_key, api_secret: _api_secret} = _client, params) do
    {:ok, _} = Application.ensure_all_started(:inets)

    params =
      URI.encode_query(
        Map.merge(params, %{
          "api_key" => api_key,
          "format" => "json"
        })
      )

    url = "#{@base_url}?#{params}"

    {:ok, {status, _headers, body}} = :httpc.request(:get, {url, []}, [], [])
    {_, status_code, _} = status

    if status_code == 200 do
      {:ok, data} = Jason.decode(body)
      data
    else
      {:error, body}
    end
  end

  def get_recent_tracks(client, username, limit \\ 50, page \\ 1) do
    params = %{
      "method" => "user.getRecentTracks",
      "user" => username,
      "limit" => Integer.to_string(limit),
      "page" => Integer.to_string(page)
    }

    Lastfm._do_get(client, params)["recenttracks"]
  end

  def get_top_tracks(client, username, limit \\ 50, page \\ 1) do
    params = %{
      "method" => "user.getTopTracks",
      "user" => username,
      "limit" => Integer.to_string(limit),
      "page" => Integer.to_string(page)
    }

    Lastfm._do_get(client, params)["toptracks"]
  end
end

api_key = System.fetch_env!("LB_LASTFM_API_KEY")
api_secret = System.fetch_env!("LB_LASTFM_API_SECRET")
lfm_client = Lastfm.new(api_key, api_secret)

:ok
```

```elixir
lfm_user = "kelvinsteiner"
# Lastfm.get_recent_tracks(lfm_client, lfm_user)
top_tracks = Lastfm.get_top_tracks(lfm_client, lfm_user, 50)["track"]

top_tracks_txt =
  Enum.map(top_tracks, fn track ->
    "#{track["@attr"]["rank"]}. #{track["name"]} â€” #{track["artist"]["name"]}"
  end)

Enum.each(top_tracks_txt, fn txt -> IO.puts(txt) end)
```

<!-- livebook:{"offset":2034,"stamp":{"token":"QTEyOEdDTQ.O6kOJaQnNo5QnftxsAEA8nBHZzrzLkpIWdfuSzi7ck3_HZEDN8Esm3WJ5o4.RaqC8Pawq3epyPBv.c-e88xnZDwo-o5b89WnWelqq41IOvJe28w3B-IsBXK626IdK8pw7rsVlkuWV19Jkcc5Og_3gu42qVIvz-_s4W0fkNkvbBZ4t.Bl0PdxO4_jMclvL-UmRH7w","version":1}} -->
